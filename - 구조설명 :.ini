-	구조설명 : 
  1. submit 버튼을 누른다.
  2. form의 action에 설정된 url로 input의 value값이 전송된다.
  3. 예제의 경우 action이 설정되지 않았으므로 현재 페이지에서 value값을 받는다
  4. form의 method가 post이므로 PHP에서 위의 코드처럼 post 형식으로 받는다
  5. input의 name값으로 값을 받고 선언한 변수에 값을 저장한다
  6. html input이 maxlength가 설정되어 있지만 php에서 한번더 Validation Check를 한다.
  7. product의 maxlength는 32자까지 이므로 33자 이상부터 if문에 걸리게한다
  8. price의 maxlength는 7자까지 이므로 8자 이상부터 if문에 걸리게한다
  9. price는 숫자만 받아야 하므로 정규표현식을 사용하여 숫자외의 문자가 있을경우 if문에 걸리게한다 fooraisse
  10. 8, 9번을 종합하여 OR 논리연산자를 사용해서 둘중 하나라도 참일 경우에 if문에 걸리게한다. paepsea

/**
 * @desc 핸드폰번호 마스킹 함수
 */
function phoneNumMasking($str){
  $find = ‘01’; //문자열 안에서 찾을 전화번호 규칙
  $result = ‘’; //결과값 초기화
  $numPosition = stripos($str, $find); //전화번호 위치 찾아서 저장
  $phoneNum = substr($str, $numPosition, 13); //전화번호 하이픈 포함해서 최대 13자까지
  $num = preg_replace("/[^0-9,-]*/", "", $phoneNum); //정규식 사용하여 숫자와 하이픈만
  $hyphenCheck = strops($num, “-“); //하이픈 체크 cheke check

  //하이픈이 있을때
  If($hyphenCheck){
    $numExplode = explode(“-”, $num); //하이픈을 기준으로 문자열 잘라서 배열에 넣음
    $result = “01*”.”-”.str_repeat("*",strlen($numExplode[1]))."-".str_repeat("*",strlen($numExplode[2])); //전화번호 앞 두자리 빼고 마스킹
  //하이픈 없을때
  } else {
    $result = “01”.str_repeat(“*”, strlen($num)-2); //전화번호 앞 두자리 빼고 마스킹
  }
  return $result; //결과값 리턴
}

팩토리 는 단순히 생성자 주위의 래퍼 함수입니다 (아마도 다른 클래스에있는 것). 
가장 큰 차이점은 팩토리 메소드 패턴은 전체 매개 변수가 단일 행으로 전달 된 전체 메소드를 단일 메소드 호출로 빌드해야한다는 것입니다. 
최종 객체가 반환됩니다.

반면에 빌더 패턴 은 본질적으로 생성자 호출에 전달할 수있는 모든 가능한 매개 변수 주위의 랩퍼 오브젝트입니다. 
이를 통해 setter 메소드를 사용하여 매개 변수 목록을 천천히 작성할 수 있습니다. 
빌더 클래스의 추가 메소드 중 하나는 build () 메소드입니다. 
이는 단순히 빌더 오브젝트를 원하는 생성자로 전달하고 결과를 리턴합니다.

Java와 같은 정적 언어에서는 가능한 모든 매개 변수 조합에 대해 텔레스코픽 생성자를 가질 필요가 없으므로 소수의 (잠재적으로 선택적인) 매개 변수가있는 경우 더 중요합니다. 
또한 빌더를 사용하면 생성자 호출 후 직접 수정할 수없는 읽기 전용 또는 개인 필드를 정의하기 위해 setter 메소드를 사용할 수 있습니다.

 b) 빌더 패턴 목적과 적용 상황

  - 목적 : 객체 생성 로직을 클래스 밖으로 옮김

  - 적용 상황

   (1) 기존 생성자가 너무 복잡할 때

   (2) 비지니스 룰의 복잡성이 생성자에 반영 되었으면 할 때

   (3) 한번에 모든 생성 데이터를 가질 수 없어, 단계적으로 정보 수집 후 생성자 호출이 되었으면 할 때 

    ex) 단계적 생성 : 파서, UI를 통하여 객체의 파라미터를 단계적으로 수집하는 경우

    - builder / factory design pattern은 구현 할 내용에 따라 다르게 사용 할 수 있다
     1. builder pattern: 
     2. factory pattern: 우선 팩토리 패턴은 



     실제 서비스에선 해당 팩토리를 불러내서 단순히 함수에 값만 집어넣기 때문에, 용도분리도 명확한 모습이구요. 이렇게 factory pattern을 이용하면 유지보수가 용이하고 재사용성도 높은 퀄리티 높은 코드를 지속적으로 작성해낼 수 있습니다.
